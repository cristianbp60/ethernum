/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.5 --types --keepnames --keepgroups --keepmeshes --transform --instance public/models/realm-city-final.glb
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'

type GLTFResult = GLTF & {
  nodes: {
    archer_tower: THREE.Mesh
    barracks: THREE.Mesh
    mage_tower: THREE.Mesh
    castle: THREE.Mesh
    ocean: THREE.Mesh
    rivers: THREE.Mesh
    forest: THREE.Mesh
    Plane007: THREE.Mesh
    Plane007_1: THREE.Mesh
    Plane007_2: THREE.Mesh
    Plane007_3: THREE.Mesh
    Plane007_4: THREE.Mesh
    Plane007_5: THREE.Mesh
    Plane007_6: THREE.Mesh
    tower: THREE.Mesh
    tower_1: THREE.Mesh
    Cube003: THREE.Mesh
    Cube003_1: THREE.Mesh
    Cube003_2: THREE.Mesh
    Cube005: THREE.Mesh
    Cube005_1: THREE.Mesh
    Cube008: THREE.Mesh
    Cube008_1: THREE.Mesh
    Cube006: THREE.Mesh
    Cube006_1: THREE.Mesh
    Cube006_2: THREE.Mesh
    Cube007: THREE.Mesh
    Cube007_1: THREE.Mesh
    Cube009: THREE.Mesh
    Cube009_1: THREE.Mesh
    Cube009_2: THREE.Mesh
    Cube013: THREE.Mesh
    Cube014: THREE.Mesh
    Cube010: THREE.Mesh
    Cone004: THREE.Mesh
    Cone004_1: THREE.Mesh
    Cube019: THREE.Mesh
    Cube019_1: THREE.Mesh
    Cube019_2: THREE.Mesh
    Cube020: THREE.Mesh
    Cube020_1: THREE.Mesh
    Cube020_2: THREE.Mesh
    Cube022: THREE.Mesh
    Cube022_1: THREE.Mesh
    Cube022_2: THREE.Mesh
    Cube023: THREE.Mesh
    Cube023_1: THREE.Mesh
    Cube024: THREE.Mesh
    Cube024_1: THREE.Mesh
    Cube017: THREE.Mesh
    Cube017_1: THREE.Mesh
    Cube018: THREE.Mesh
    Cube001: THREE.Mesh
    Cube001_1: THREE.Mesh
    Cylinder001: THREE.Mesh
    Cube002: THREE.Mesh
    Cube002_1: THREE.Mesh
  }
  materials: {
    PaletteMaterial004: THREE.MeshStandardMaterial
    PaletteMaterial012: THREE.MeshPhysicalMaterial
    PaletteMaterial013: THREE.MeshStandardMaterial
    PaletteMaterial015: THREE.MeshStandardMaterial
    PaletteMaterial014: THREE.MeshStandardMaterial
    PaletteMaterial005: THREE.MeshStandardMaterial
    PaletteMaterial016: THREE.MeshStandardMaterial
    PaletteMaterial001: THREE.MeshStandardMaterial
    PaletteMaterial003: THREE.MeshStandardMaterial
    PaletteMaterial002: THREE.MeshStandardMaterial
    PaletteMaterial006: THREE.MeshStandardMaterial
    PaletteMaterial007: THREE.MeshStandardMaterial
    PaletteMaterial008: THREE.MeshStandardMaterial
    PaletteMaterial009: THREE.MeshStandardMaterial
    PaletteMaterial010: THREE.MeshStandardMaterial
    PaletteMaterial011: THREE.MeshStandardMaterial
  }
}

const dracoloader = new DRACOLoader().setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.5/')

let gltfLoader = new GLTFLoader()
  .setCrossOrigin('anonymous')
  .setDRACOLoader(dracoloader)

export function Model(props: JSX.IntrinsicElements['group']) {
  // const gltf = useGLTF('/models/realm-city-final-transformed.glb', false, true) as GLTFResult
  const [scene, setScene] = useState<any | null>(null)

  useEffect(() => {
    gltfLoader.load('/models/realm-city_13.glb', function (gltf) {

      const scene = gltf.scene;
      setScene(scene)
      console.log(scene)
    });
  }, [])


  return (
    <group {...props} dispose={null}>
      {scene && <primitive object={scene} />}
    </group>
  )
}

useGLTF.preload('/models/realm-city_13.glb')
