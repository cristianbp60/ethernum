/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 --types --keepnames --keepgroups --keepmeshes --transform --precision 6 client/public/models/Warrior.gltf 
Files: client/public/models/Warrior.gltf [3.04MB] > /Users/aymericdelabrousse/Projects/blockchain/cairo/realms/official-eternum/eternum/Warrior-transformed.glb [378.16KB] (88%)
*/

import * as THREE from "three";
import React, { useCallback, useEffect, useMemo, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { Vector3, useGraph } from "@react-three/fiber";
import { FRIENDLY_ARMY_MODEL_HOVER_COLOR } from "../Armies";

type GLTFResult = GLTF & {
  nodes: {
    Face: THREE.Mesh;
    ShoulderPadL: THREE.Mesh;
    Warrior_Sword: THREE.Mesh;
    ShoulderPadR: THREE.Mesh;
    Warrior_Body: THREE.SkinnedMesh;
    Root: THREE.Bone;
  };
  materials: {
    Warrior_Sword_Texture: THREE.MeshBasicMaterial;
    Warrior_Texture: THREE.MeshBasicMaterial;
  };
  animations: GLTFAction[];
};

type ActionName =
  | "Death"
  | "Idle"
  | "Idle_Attacking"
  | "Idle_Weapon"
  | "PickUp"
  | "Punch"
  | "RecieveHit"
  | "Roll"
  | "Run"
  | "Run_Weapon"
  | "Sword_Attack"
  | "Sword_Attack2"
  | "Walk";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<
    JSX.IntrinsicElements["mesh"] | JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
  >
>;

type WarriorModelProps = {
  position: Vector3;
  rotationY: number;
  onClick: () => void;
  onPointerEnter: (e: any) => void;
  onPointerOut: (e: any) => void;
  hovered: boolean;
  isRunning: boolean;
  isDead: boolean;
};

export function WarriorModel({
  position,
  rotationY,
  onClick,
  onPointerEnter,
  onPointerOut,
  hovered,
  isRunning,
  isDead,
  ...props
}: WarriorModelProps) {
  const groupRef = useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF("/models/Warrior-transformed.glb") as GLTFResult;
  const { actions } = useAnimations(animations, groupRef);
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  useEffect(() => {
    if (!isDead) {
      nodes.Root.rotation.y = rotationY;
    }
  }, [rotationY]);

  // add actions to onClick
  const onClickAction = useCallback(() => {
    if (isDead) return;
    const action = actions["Sword_Attack"];
    if (action) {
      action.reset();
      action.setLoop(THREE.LoopOnce, 1);
      action.clampWhenFinished = true;
      action.play();
    }
    if (onClick) {
      onClick();
    }
  }, [isDead, onClick]);

  useEffect(() => {
    if (isRunning) {
      actions["Run"]?.play();
    } else {
      actions["Run"]?.stop();
    }
  }, [isRunning]);

  useEffect(() => {
    if (isDead) {
      const action = actions["Death"];
      if (action) {
        action.play();
        action.paused = true; // Immediately pause the action
        action.time = action.getClip().duration; // Set to the last frame
        action.enabled = true;
        // // Ensure the action's transformations are applied
        requestAnimationFrame(() => {
          action.getMixer().update(0);
          // Apply the random rotation after the animation has been updated
          const randomRotation = Math.random() * 2 * Math.PI;
          nodes.Root.rotation.y = randomRotation;
        });
      }
    }
  }, [isDead]);

  const hoverMaterial = useMemo(() => {
    const material = new THREE.MeshStandardMaterial();
    material.color.set(FRIENDLY_ARMY_MODEL_HOVER_COLOR);
    return material;
  }, []);

  useEffect(() => {
    const targetMaterial = hovered ? hoverMaterial : materials.Warrior_Texture;
    // @ts-ignore
    nodes.Warrior_Body.material = targetMaterial;
    // @ts-ignore
    nodes.ShoulderPadL.material = targetMaterial;
    // @ts-ignore
    nodes.ShoulderPadR.material = targetMaterial;
    // @ts-ignore
    nodes.Warrior_Sword.material = targetMaterial;
    // @ts-ignore
    nodes.Face.material = targetMaterial;
  }, [hovered, hoverMaterial, nodes, materials.Warrior_Texture]);

  return (
    <group
      {...props}
      position={position}
      ref={groupRef}
      onClick={onClickAction}
      onPointerEnter={onPointerEnter}
      onPointerOut={onPointerOut}
    >
      <group name="Scene">
        <group name="CharacterArmature">
          <primitive object={nodes.Root} />
        </group>
        <skinnedMesh
          name="Warrior_Body"
          // @ts-ignore
          geometry={nodes.Warrior_Body.geometry}
          material={hovered ? hoverMaterial : materials.Warrior_Texture}
          // @ts-ignore
          skeleton={nodes.Warrior_Body.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/Warrior-transformed.glb");
