/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;

export function defineContractComponents(world: World) {
  return {
    AddressName: (() => {
      return defineComponent(
        world,
        { address: RecsType.BigInt, name: RecsType.BigInt },
        {
          metadata: {
            name: "AddressName",
            types: ["felt252","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    Age: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, born_at: RecsType.BigInt },
        {
          metadata: {
            name: "Age",
            types: ["u128","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    ArrivalTime: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, arrives_at: RecsType.BigInt },
        {
          metadata: {
            name: "ArrivalTime",
            types: ["u128","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    Attack: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, value: RecsType.BigInt },
        {
          metadata: {
            name: "Attack",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    AttackConfig: (() => {
      return defineComponent(
        world,
        { entity_type: RecsType.BigInt, max_value: RecsType.BigInt },
        {
          metadata: {
            name: "AttackConfig",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Bank: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, owner_fee_scaled: RecsType.BigInt, exists: RecsType.Boolean },
        {
          metadata: {
            name: "Bank",
            types: ["u128","u128","bool"],
            customTypes: [],
          },
        }
      );
    })(),
    BankAuction: (() => {
      return defineComponent(
        world,
        { bank_id: RecsType.BigInt, bank_gives_resource_type: RecsType.Number, bank_swap_resource_cost_index: RecsType.Number, decay_constant_mag: RecsType.BigInt, decay_constant_sign: RecsType.Boolean, per_time_unit: RecsType.BigInt, start_time: RecsType.BigInt, sold: RecsType.BigInt, price_update_interval: RecsType.BigInt },
        {
          metadata: {
            name: "BankAuction",
            types: ["u128","u8","u32","u128","bool","u128","u64","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    BankSwapResourceCost: (() => {
      return defineComponent(
        world,
        { bank_gives_resource_type: RecsType.Number, index: RecsType.Number, resource_cost_id: RecsType.BigInt, resource_cost_count: RecsType.Number },
        {
          metadata: {
            name: "BankSwapResourceCost",
            types: ["u8","u32","u128","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    Capacity: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, weight_gram: RecsType.BigInt },
        {
          metadata: {
            name: "Capacity",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    CapacityConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, carry_capacity_config_id: RecsType.BigInt, entity_type: RecsType.BigInt, weight_gram: RecsType.BigInt },
        {
          metadata: {
            name: "CapacityConfig",
            types: ["u128","u128","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    CaravanMembers: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, key: RecsType.BigInt, count: RecsType.Number },
        {
          metadata: {
            name: "CaravanMembers",
            types: ["u128","u128","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    CombatConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, stealing_trial_count: RecsType.Number, wheat_burn_per_soldier: RecsType.BigInt, fish_burn_per_soldier: RecsType.BigInt },
        {
          metadata: {
            name: "CombatConfig",
            types: ["u128","u32","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Defence: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, value: RecsType.BigInt },
        {
          metadata: {
            name: "Defence",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    DefenceConfig: (() => {
      return defineComponent(
        world,
        { entity_type: RecsType.BigInt, max_value: RecsType.BigInt },
        {
          metadata: {
            name: "DefenceConfig",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    DetachedResource: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, index: RecsType.Number, resource_type: RecsType.Number, resource_amount: RecsType.BigInt },
        {
          metadata: {
            name: "DetachedResource",
            types: ["u128","u32","u8","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    EntityMetadata: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, entity_type: RecsType.BigInt },
        {
          metadata: {
            name: "EntityMetadata",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    EntityOwner: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, entity_owner_id: RecsType.BigInt },
        {
          metadata: {
            name: "EntityOwner",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    ForeignKey: (() => {
      return defineComponent(
        world,
        { foreign_key: RecsType.BigInt, entity_id: RecsType.BigInt },
        {
          metadata: {
            name: "ForeignKey",
            types: ["felt252","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Health: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, value: RecsType.BigInt },
        {
          metadata: {
            name: "Health",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    HealthConfig: (() => {
      return defineComponent(
        world,
        { entity_type: RecsType.BigInt, resource_cost_id: RecsType.BigInt, resource_cost_count: RecsType.Number, max_value: RecsType.BigInt },
        {
          metadata: {
            name: "HealthConfig",
            types: ["u128","u128","u32","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    HyperStructure: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, hyperstructure_type: RecsType.Number, controlling_order: RecsType.Number, completed: RecsType.Boolean, completion_cost_id: RecsType.BigInt, completion_resource_count: RecsType.Number },
        {
          metadata: {
            name: "HyperStructure",
            types: ["u128","u8","u8","bool","u128","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    Inventory: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, items_key: RecsType.BigInt, items_count: RecsType.BigInt },
        {
          metadata: {
            name: "Inventory",
            types: ["u128","felt252","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Labor: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, resource_type: RecsType.Number, balance: RecsType.BigInt, last_harvest: RecsType.BigInt, multiplier: RecsType.BigInt },
        {
          metadata: {
            name: "Labor",
            types: ["u128","u8","u64","u64","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    LaborAuction: (() => {
      return defineComponent(
        world,
        { zone: RecsType.Number, decay_constant_mag: RecsType.BigInt, decay_constant_sign: RecsType.Boolean, per_time_unit: RecsType.BigInt, start_time: RecsType.BigInt, sold: RecsType.BigInt, price_update_interval: RecsType.BigInt },
        {
          metadata: {
            name: "LaborAuction",
            types: ["u8","u128","bool","u128","u64","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    LaborBuilding: (() => {
      return defineComponent(
        world,
        { realm_entity_id: RecsType.BigInt, building_type: RecsType.Number, labor_count: RecsType.BigInt, level: RecsType.BigInt },
        {
          metadata: {
            name: "LaborBuilding",
            types: ["u128","u8","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    LaborBuildingCost: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, labor_category: RecsType.Number, resource_cost_id: RecsType.BigInt, resource_cost_count: RecsType.Number },
        {
          metadata: {
            name: "LaborBuildingCost",
            types: ["u128","u8","u128","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    LaborBuildingsConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, level_multiplier: RecsType.BigInt, level_discount_mag: RecsType.BigInt, resources_category_1: RecsType.BigInt, resources_category_1_count: RecsType.Number, resources_category_2: RecsType.BigInt, resources_category_2_count: RecsType.Number, resources_category_3: RecsType.BigInt, resources_category_3_count: RecsType.Number, resources_category_4: RecsType.BigInt, resources_category_4_count: RecsType.Number },
        {
          metadata: {
            name: "LaborBuildingsConfig",
            types: ["u128","u128","u128","u128","u8","u128","u8","u128","u8","u128","u8"],
            customTypes: [],
          },
        }
      );
    })(),
    LaborConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, base_labor_units: RecsType.BigInt, base_resources_per_cycle: RecsType.BigInt, base_food_per_cycle: RecsType.BigInt },
        {
          metadata: {
            name: "LaborConfig",
            types: ["u128","u64","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    LaborCostAmount: (() => {
      return defineComponent(
        world,
        { resource_type_labor: RecsType.BigInt, resource_type_cost: RecsType.BigInt, value: RecsType.BigInt },
        {
          metadata: {
            name: "LaborCostAmount",
            types: ["felt252","felt252","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    LaborCostResources: (() => {
      return defineComponent(
        world,
        { resource_type_labor: RecsType.BigInt, resource_types_packed: RecsType.BigInt, resource_types_count: RecsType.Number },
        {
          metadata: {
            name: "LaborCostResources",
            types: ["felt252","u128","u8"],
            customTypes: [],
          },
        }
      );
    })(),
    Level: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, level: RecsType.BigInt, valid_until: RecsType.BigInt },
        {
          metadata: {
            name: "Level",
            types: ["u128","u64","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    LevelingConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, decay_interval: RecsType.BigInt, max_level: RecsType.BigInt, decay_scaled: RecsType.BigInt, cost_percentage_scaled: RecsType.BigInt, base_multiplier: RecsType.BigInt, wheat_base_amount: RecsType.BigInt, fish_base_amount: RecsType.BigInt, resource_1_cost_id: RecsType.BigInt, resource_1_cost_count: RecsType.Number, resource_2_cost_id: RecsType.BigInt, resource_2_cost_count: RecsType.Number, resource_3_cost_id: RecsType.BigInt, resource_3_cost_count: RecsType.Number },
        {
          metadata: {
            name: "LevelingConfig",
            types: ["u128","u64","u64","u128","u128","u128","u128","u128","u128","u32","u128","u32","u128","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    MapExploreConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, wheat_burn_amount: RecsType.BigInt, fish_burn_amount: RecsType.BigInt, reward_resource_amount: RecsType.BigInt },
        {
          metadata: {
            name: "MapExploreConfig",
            types: ["u128","u128","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Movable: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, sec_per_km: RecsType.Number, blocked: RecsType.Boolean, round_trip: RecsType.Boolean, start_coord_x: RecsType.BigInt, start_coord_y: RecsType.BigInt, intermediate_coord_x: RecsType.BigInt, intermediate_coord_y: RecsType.BigInt },
        {
          metadata: {
            name: "Movable",
            types: ["u128","u16","bool","bool","u128","u128","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Orders: (() => {
      return defineComponent(
        world,
        { order_id: RecsType.BigInt, hyperstructure_count: RecsType.BigInt },
        {
          metadata: {
            name: "Orders",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    OwnedResourcesTracker: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, resource_types: RecsType.Number },
        {
          metadata: {
            name: "OwnedResourcesTracker",
            types: ["u128","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    Owner: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, address: RecsType.BigInt },
        {
          metadata: {
            name: "Owner",
            types: ["u128","contractaddress"],
            customTypes: [],
          },
        }
      );
    })(),
    Position: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, x: RecsType.BigInt, y: RecsType.BigInt },
        {
          metadata: {
            name: "Position",
            types: ["u128","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Quantity: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, value: RecsType.BigInt },
        {
          metadata: {
            name: "Quantity",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    QuantityTracker: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, count: RecsType.BigInt },
        {
          metadata: {
            name: "QuantityTracker",
            types: ["felt252","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Realm: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, realm_id: RecsType.BigInt, resource_types_packed: RecsType.BigInt, resource_types_count: RecsType.Number, cities: RecsType.Number, harbors: RecsType.Number, rivers: RecsType.Number, regions: RecsType.Number, wonder: RecsType.Number, order: RecsType.Number },
        {
          metadata: {
            name: "Realm",
            types: ["u128","u128","u128","u8","u8","u8","u8","u8","u8","u8"],
            customTypes: [],
          },
        }
      );
    })(),
    RealmFreeMintConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, detached_resource_id: RecsType.BigInt, detached_resource_count: RecsType.Number },
        {
          metadata: {
            name: "RealmFreeMintConfig",
            types: ["u128","u128","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    Resource: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, resource_type: RecsType.Number, balance: RecsType.BigInt },
        {
          metadata: {
            name: "Resource",
            types: ["u128","u8","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    ResourceAllowance: (() => {
      return defineComponent(
        world,
        { owner_entity_id: RecsType.BigInt, approved_entity_id: RecsType.BigInt, resource_type: RecsType.Number, amount: RecsType.BigInt },
        {
          metadata: {
            name: "ResourceAllowance",
            types: ["u128","u128","u8","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    ResourceChest: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, locked_until: RecsType.BigInt, resources_count: RecsType.Number },
        {
          metadata: {
            name: "ResourceChest",
            types: ["u128","u64","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    ResourceCost: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, index: RecsType.Number, resource_type: RecsType.Number, amount: RecsType.BigInt },
        {
          metadata: {
            name: "ResourceCost",
            types: ["u128","u32","u8","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Road: (() => {
      return defineComponent(
        world,
        { start_coord_x: RecsType.BigInt, start_coord_y: RecsType.BigInt, end_coord_x: RecsType.BigInt, end_coord_y: RecsType.BigInt, usage_count: RecsType.Number },
        {
          metadata: {
            name: "Road",
            types: ["u128","u128","u128","u128","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    RoadConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, resource_cost_id: RecsType.BigInt, resource_cost_count: RecsType.Number, speed_up_by: RecsType.BigInt },
        {
          metadata: {
            name: "RoadConfig",
            types: ["u128","u128","u32","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    SoldierConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, resource_cost_id: RecsType.BigInt, resource_cost_count: RecsType.Number, wheat_burn_per_soldier: RecsType.BigInt, fish_burn_per_soldier: RecsType.BigInt },
        {
          metadata: {
            name: "SoldierConfig",
            types: ["u128","u128","u32","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    SpeedConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, speed_config_id: RecsType.BigInt, entity_type: RecsType.BigInt, sec_per_km: RecsType.Number },
        {
          metadata: {
            name: "SpeedConfig",
            types: ["u128","u128","u128","u16"],
            customTypes: [],
          },
        }
      );
    })(),
    Status: (() => {
      return defineComponent(
        world,
        { trade_id: RecsType.BigInt, value: RecsType.BigInt },
        {
          metadata: {
            name: "Status",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    TickConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, max_moves_per_tick: RecsType.Number, tick_interval_in_seconds: RecsType.BigInt },
        {
          metadata: {
            name: "TickConfig",
            types: ["u128","u8","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    TickMove: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, tick: RecsType.BigInt, count: RecsType.Number },
        {
          metadata: {
            name: "TickMove",
            types: ["u128","u64","u8"],
            customTypes: [],
          },
        }
      );
    })(),
    Tile: (() => {
      return defineComponent(
        world,
        { _col: RecsType.BigInt, _row: RecsType.BigInt, col: RecsType.BigInt, row: RecsType.BigInt, explored_by_id: RecsType.BigInt, explored_at: RecsType.BigInt, biome: RecsType.Number },
        {
          metadata: {
            name: "Tile",
            types: ["u128","u128","u128","u128","u128","u64","enum"],
            customTypes: ["Biome"],
          },
        }
      );
    })(),
    TownWatch: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, town_watch_id: RecsType.BigInt },
        {
          metadata: {
            name: "TownWatch",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Trade: (() => {
      return defineComponent(
        world,
        { trade_id: RecsType.BigInt, maker_id: RecsType.BigInt, maker_resource_chest_id: RecsType.BigInt, maker_transport_id: RecsType.BigInt, taker_id: RecsType.BigInt, taker_resource_chest_id: RecsType.BigInt, taker_transport_id: RecsType.BigInt, expires_at: RecsType.BigInt },
        {
          metadata: {
            name: "Trade",
            types: ["u128","u128","u128","u128","u128","u128","u128","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    TravelConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, free_transport_per_city: RecsType.BigInt },
        {
          metadata: {
            name: "TravelConfig",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Weight: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, value: RecsType.BigInt },
        {
          metadata: {
            name: "Weight",
            types: ["u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    WeightConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, weight_config_id: RecsType.BigInt, entity_type: RecsType.BigInt, weight_gram: RecsType.BigInt },
        {
          metadata: {
            name: "WeightConfig",
            types: ["u128","u128","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    WorldConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.BigInt, admin_address: RecsType.BigInt, realm_l2_contract: RecsType.BigInt },
        {
          metadata: {
            name: "WorldConfig",
            types: ["u128","contractaddress","contractaddress"],
            customTypes: [],
          },
        }
      );
    })(),
  };
}
